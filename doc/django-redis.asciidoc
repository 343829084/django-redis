django-redis documentation
==========================
Andrey Antukh, <niwi@niwi.be>
3.5.2, 2014-03-07

:toc:
:numbered:


Introduction
------------

_django-redis_ is a xref:license[BSD Licensed], full featured redis cache/session backend for Django.


Why use django-redis?
---------------------

Because it:

- In active development
- Modular client system (pluggable clients)
- Master-Slave support on default client.
- With complete battery of tests.
- Used in production on several projects as cache and session storage.
- Support infinite timeouts.
- Python3 support in same code base.
- Wide range of Django version support: 1.3-1.7
- Facilities for raw access to redis client/connection pool.
- Highly configurable (can emulate memcached exception behavior as example).
- Unix sockets supported by default.
- Plugable parsers.


How to install?
---------------

The simples way for get django-redis on your project is using *pip*:

[source,text]
----
pip install django-redis
----


User guide
----------

Configure as cache backend
~~~~~~~~~~~~~~~~~~~~~~~~~~

For start using *django-redis*, you should change your django cache settings to something
like this:

[source, python]
----
CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "127.0.0.1:6379:1",
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.DefaultClient",
            "PASSWORD": "secretpassword", # Optional
        }
    }
}
----

On this example, we are using standard tcp/ip sockets connection to localhost redis and using database 1.
In `OPTIONS`, we have especified the plugable client that we want use; in this case the default. You can ommit 
this part because that client is used by default if no one is specified.

NOTE: If you want use unix sockets, change the `LOCATION` value to something like `"unix:/path/to/socket:1"`.


Configure as session backend
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django, by default can use any cache backend as session backend and you can take profit of it using *django-redis*
as backend for session storage whithout installing any additional and unnecesary backends:

[source, python]
----
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
----


Advanced usage
--------------

Pickle version
~~~~~~~~~~~~~~

*django-redis* for al most all values uses pickle for serialize objects and it, by default uses the
last pickle protocol version, but if you want set a custom version you can do it with *PICKLE_VERSION* key
on *OPTIONS*:

[source, python]
----
"OPTIONS": {
    "PICKLE_VERSION": -1 # Use the last
}
----

Socket timeout
~~~~~~~~~~~~~~

You can set socket timeout using *SOCKET_TIMEOUT* key on *OPTIONS* dict:

[source, python]
----
"OPTIONS": {
    "SOCKET_TIMEOUT": 5, # in segons
}
----

Memcached exceptions behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In some situations, when redis is only used for cache you do not want exceptios when redis is down. This is
a default behavior with memcached backend and it can be emulated with *django-redis*.

You can ignore exceptions globally (for all configured redis cache clients) setting *DJANGO_REDIS_IGNORE_EXCEPTIONS*
to `True` in your settings.

Additionally, you can set it individually for each client on their *OPTIONS* dict:

[source, python]
----
"OPTIONS": {
    "IGNORE_EXCEPTIONS": True,
}
----

Infinite timeout
~~~~~~~~~~~~~~~~

*django-redis* comes with infinite timeouts support from before django has added it (with django 1.6 version).

Before django 1.6, django-redis interprets 0 timeout value as infinite value and with django>=1.6 it also supports
`None` as timeout value.

.This statements now are equivalent
[source, python]
----
cache.set('key', 'value', timeout=0)
cache.set('key', 'value', timeout=None)
----

Additional methods
~~~~~~~~~~~~~~~~~~

*django-redis* comes with some additions to the default django backend interface with two new methods:

- `keys(wildcard_pattern)`: Retrieve keys matching glob pattern.
- `delete_pattern(wildcard_pattern)`: Remove keys matching glob pattern.

.Example use of keys
[source, python]
----
>>> from django.core.cache import cache
>>> cache.keys("foo_*")
["value1", "value2"]
----

.Example use of delete_pattern
[source, python]
----
>>> from django.core.cache import cache
>>> cache.delete_pattern("foo_*")
----

Redis native commands
~~~~~~~~~~~~~~~~~~~~~

*django-redis* has limited support for some redis atomic operations, such as commands `setnx` and `inc`.

You can use *setnx* command with backend `set()` method with `nx` parameter:

.Example:
[source, python]
----
>>> from django.core.cache import cache
>>> cache.set("key", "value1", nx=True)
True
>>> cache.set("key", "value2", nx=True)
False
>>> cache.get("key")
"value1"
----

Raw client access
~~~~~~~~~~~~~~~~~

In some situations, your application should require access to raw redis client for use some other advanced
features that aren't exposed by django cache interface. For avoid store an other settings for creating a raw 
connection, *django-redis* exposes functions with that you can obtain a raw client reusing cache connection 
string: `get_redis_connection(alias)`.

[source, python]
----
>>> from redis_cache import get_redis_connection
>>> con = get_redis_connection('default')
>>> con
<redis.client.Redis object at 0x2dc4510>
----

WARNING: Not all plugable clients have support this feature.


Plugable parsers
~~~~~~~~~~~~~~~~

redis-py (python redis client used by django-redis) comes with pure python redis parser that works very
well for al most common task, but if you want some performance boost, you can use *hiredis*.

*hiredis* is a redis client writen in C and it has it own parser that can be used with *django-redis*.

[source, python]
----
"OPTIONS": {
    "PARSER_CLASS": "redis.connection.HiredisParser",
}
----


Pluggable clients
~~~~~~~~~~~~~~~~~

Default client
^^^^^^^^^^^^^^

Additionally to previously explained, default client comes with master-slave connection support. For
use master-slave configuration on your project, you should change you *LOCATION* value to something like this:

[source, python]
----
"LOCATION": [
    "127.0.0.1:6379:1",
    "127.0.0.1:6378:1",
]
----

WARNING: Master-Slave setup is not heavily tested on production environments.

Shard client
^^^^^^^^^^^^

This plugable client implements client-side sharding. It inherits almost all functionality from
the default client. For use it, you change your cache settings to something like this:

[source, python]
----
CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": [
            "127.0.0.1:6379:1",
            "127.0.0.1:6379:2",
        ],
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.ShardClient",
        }
    }
}
----

WARNING: shard client is still experimental and be careful when using it on production environments.

Herd client
^^^^^^^^^^^

This plugable client helps with dealing with thundering herd problem. You can read more about it
on link:http://en.wikipedia.org/wiki/Thundering_herd_problem[Wikipedia].

As previous plugable client, it inherits all functionality from default client, adding some additional
login for get/set keys.

.Example setup
[source,python]
----
 CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "127.0.0.1:6379:1",
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.HerdClient",
        }
    }
}
----

This client, exposes additional settings:

- *CACHE_HERD_TIMEOUT*: Set default herd timeout. (default value: 60s)


Auto Failover client
^^^^^^^^^^^^^^^^^^^^

This plugable experimental client offers simple failover algorithm if the main redis server turns down.

For setup, you should change your cache settings to somethin like this:

[source,python]
----
CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "127.0.0.1:6379:1/127.0.0.2:6379:1",
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.SimpleFailoverClient",
        }
    }
}
----

The big difference is that each key on *LOCATION* setting list can contain two connection strings
separated by "/". A second connection strings works as failover server.


[[license]]
License
-------

[source,text]
----
Copyright (c) 2011-2014 Andrei Antoukh <niwi@niwi.be>
Copyright (c) 2011 Sean Bleier

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----
